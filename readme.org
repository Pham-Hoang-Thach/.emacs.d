#+title: Emacs Configurations
#+author: Thach H. Pham
#+description: Emacs Configurations with WSL2
#+language: en
#+property: results silent

* General Setup
*** UTF-8 Encoding

#+begin_src elisp
  (setq locale-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (setq tab-width 4)
  (set-face-attribute 'default nil :height 180)
#+end_src

*** Stop Emacs Littering

#+begin_src elisp
  ;; Avoid #file.org# to appear
  (auto-save-visited-mode)
  (setq create-lockfiles nil)
  ;; Avoid filename.ext~ to appear
  (setq make-backup-files nil)
#+end_src

*** Additional Aesthetic

#+begin_src elisp
  (show-paren-mode 1)
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (setq initial-major-mode 'org-mode)
  (setq-default indent-tabs-mode nil)
  (setq pop-up-windows nil)
  (tool-bar-mode 0) 
  (tooltip-mode  1)
  (scroll-bar-mode 0)
  (menu-bar-mode 0)
  (global-visual-line-mode 1)
  ;; Line cursor and no blink
  (set-default 'cursor-type  '(bar . 1))
  (blink-cursor-mode 0)
  ;; Line spacing, can be 0 for code and 1 or 2 for text
  ;; (setq-default line-spacing 0.5)
  ;; Underline line at descent position, not baseline position
  (setq x-underline-at-descent-line t)
  ;(setq user-full-name "Thach H. Pham")
  (setq default-frame-alist '((minibuffer . t)))
  (setq org-export-with-toc nil)      ;; Disable table of contents
  ;(setq org-export-with-author nil)  ;; Exclude author name
  (setq org-tags-column 50) ;; All tags will start at column 120
#+end_src

*** XDG-Open

#+begin_src elisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "xdg-open")
  (setq browse-url-generic-program "/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe")
#+end_src

* Org-Mode
*** Activation

#+begin_src elisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+end_src

*** Identation, Heading & Buffer

#+begin_src elisp
  ;;Indentation
    (setq org-startup-indented t
          org-src-tab-acts-natively t)
  ;;Collapse all header
    (setq org-startup-folded t) ;; nil for expansion
  ;;Show bullets instead of a dash in bullet lists
    ;(font-lock-add-keywords 'org-mode
    ;                        '(("^ *\\([-]\\)
    ;                          (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))
    ;(font-lock-add-keywords 'org-mo
    ;                        '(("^ *\\([+]\\)
    ;                        (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◦"))))))
  ;;Buffer
    (setq buffer-read-only nil)
    (setq inhibit-read-only t)
    (setq org-hide-emphasis-markers t
          org-fontify-done-headline t
          org-hide-leading-stars t
          ;org-pretty-entities t
          org-odd-levels-only t)
    (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
#+end_src

*** Structure Templates

#+begin_src elisp
  ;; Org-tempo
    (require 'org-tempo)
    (setq org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-confirm-babel-evaluate nil)
          ;org-edit-src-content-indentation 0)
  ;; Outline numbering
    ;(use-package org-num
    ;  :load-path "lisp/"
    ;  :after org
    ;  :hook (org-mode . org-num-mode))
#+end_src

*** Faces Setup
***** Keywords

#+begin_src elisp
  ;; Setup
  (setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))
  ;; Cannot set a headline to DONE if children aren’t DONE.
  (setq-default org-enforce-todo-dependencies t)
  ;; Foreground & Exporting
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))
  ;; I don't wan't the keywords in my exports
  (setq-default org-export-with-todo-keywords nil)
  ;; Bullets & Icons
  (with-eval-after-load 'org-superstar
      (setq org-superstar-item-bullet-alist
          '((?* . ?•)
            (?+ . ?➤)
            (?- . ?★)))
      (setq org-superstar-special-todo-items t)
      (setq org-superstar-remove-leading-stars t)
      (org-superstar-restart))
  ;; Set Faces
  (defun butler/set-keyword-faces-org ()
    (mapc (lambda (pair) (push pair prettify-symbols-alist))
          '(;; Syntax
            ("#+begin_quote" . "“")
            ("#+end_quote" . "”")))
    (prettify-symbols-mode +1))
#+end_src

***** Propotional Width

#+begin_src elisp
  (defun butler/buffer-face-mode-variable ()
    "Set font to a variable width (proportional) font in the current buffer."
    (interactive)
    (setq buffer-face-mode-face '(:family "Monospace"
                                          :height 200
                                          :width normal))
    (buffer-face-mode 1))  ; Activates the buffer-face-mode
#+end_src

***** Variable Pitch

#+begin_src elisp
  (defun butler/set-general-faces-org ()
    (butler/buffer-face-mode-variable)
    (setq line-spacing 0.5
          ;org-pretty-entities t
          org-startup-indented t
          org-adapt-indentation nil)
    (variable-pitch-mode +1)
    (mapc
     (lambda (face) ;; Other fonts that require it are set to fixed-pitch.
       (set-face-attribute face nil :inherit 'fixed-pitch))
     (list 'org-block
           'org-table
           'org-verbatim
           'org-block-begin-line
           'org-block-end-line
           'org-meta-line
           'org-date
           'org-drawer
           'org-property-value
           'org-special-keyword
           'org-document-info-keyword))
    (mapc ;; This sets the fonts to a smaller size
     (lambda (face)
       (set-face-attribute face nil :height 1.0))
     (list 'org-document-info-keyword
           'org-block-begin-line
           'org-block-end-line
           'org-block
           'org-meta-line
           'org-drawer
           'org-property-value
           'org-special-keyword
           ;;'org-link
           'org-footnote
           )))
#+end_src

***** Colors & Size of Headlines

#+begin_src elisp
  (defun butler/set-specific-faces-org ()
    (set-face-attribute 'org-code nil
                        :inherit '(shadow fixed-pitch))
    ;; Without indentation the headlines need to be different to be visible
    (set-face-attribute 'org-level-1 nil
                        :height 1.5
                        :foreground "#BEA4DB")
    (set-face-attribute 'org-level-2 nil
                        :height 1.3
                        :foreground "#A382FF"
                        :slant 'italic)
    (set-face-attribute 'org-level-3 nil
                        :height 1.2
                        :foreground "#5E65CC"
                        :slant 'italic)
    (set-face-attribute 'org-level-4 nil
                        :height 1.1
                        :foreground "#ABABFF")
    (set-face-attribute 'org-level-5 nil
                        :foreground "#2843FB")
    (set-face-attribute 'org-date nil
                        :foreground "#ECBE7B"
                        :height 0.8)
    (set-face-attribute 'org-document-title nil
                        :foreground "DarkOrange3"
                        :height 1.3)
    (set-face-attribute 'org-ellipsis nil
                        :foreground "#4f747a" :underline nil)
    (set-face-attribute 'variable-pitch nil
                        :family "Monospace" :height 1.2))
#+end_src

***** Styles

#+begin_src elisp
  (defun butler/style-org ()
    (butler/set-general-faces-org)
    (butler/set-specific-faces-org)
    (butler/set-keyword-faces-org)
    )
  (add-hook 'org-mode-hook 'butler/style-org)
#+end_src

*** Babel

#+begin_src elisp
  (org-babel-do-load-languages
   'org-babel-load-languages '((latex . t)
                               (emacs-lisp . t)
                               ;(maxima .t)
                               (python . t)
                               (C . t)
                               (R . t)
                               (jupyter . t)))
  ;(org-babel-jupyter-override-src-block "python")
  ;(org-babel-jupyter-override-src-block "julia")
  ;(add-to-list 'org-structure-template-alist
  ;             '("j" . "src julia :session *jl*"))
  (add-to-list 'org-structure-template-alist
               '("p" . "src jupyter-python :session *py*"))
  ;(add-to-list 'org-structure-template-alist
  ;             '("m" . "src maxima :session *wxm*"))
  (add-to-list 'org-structure-template-alist
               '("r" . "src R :session *r*"))
#+end_src

*** Latex

#+begin_src elisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
   ;; dvisvgm setup for Latex
  (setq org-latex-create-formula-image-program 'dvisvgm)
  (setq org-preview-latex-default-process 'dvisvgm)
   ;(setq org-preview-latex-process-alist 'dvisvgm)
   ;(require ‘latex-preview-pane)
   ;(latex-preview-pane-enable)
   ;; images preview
  (setq org-startup-with-inline-images t)
  (setq org-startup-with-latex-preview t)
   ;; highlight code using mint
  (setq org-latex-compiler "xelatex")
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (add-to-list 'org-latex-packages-alist '("" "amsmath" t))
  (setq org-latex-listings 'minted)
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "bibtex %b"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
   ;; mint style
   (setq org-latex-minted-options
         '(;("frame" "lines")
           ("fontsize" "\\footnotesize")
           ("mathescape" "")
           ("samepage" "")
           ;("xrightmargin" "0.5cm")
           ("xleftmargin"  "1cm")
           ("bgcolor" "lightgray")
           ("linenos")
           ("firstnumber" "last")
           ("tabsize" "4")
           ("autogobble")
           ("numbersep" "0.5cm")
           ("breaklines" "true")
           ))
  (add-to-list 'org-latex-packages-alist '("AUTO" "babel" t ("pdflatex" "xelatex")))
#+end_src

*** GTD

#+begin_src elisp
  ;; Files
  (setq org-directory "/mnt/tsys/sys/orgmode")
  (setq org-agenda-files (list org-directory))
  (global-set-key (kbd "<f7>") #'org-capture)
  (setq org-capture-templates
        `(("i" "Inbox" entry
           (file "inbox.org")
           (file "~/.emacs.d/capture/inbox.org")
           :empty-lines-before 1)
         ("m" "Meeting" entry
          (file "agenda.org")
          (file "~/.emacs.d/capture/agenda.org")
          :empty-lines-before 1)))
  (defun org-capture-inbox ()
    (interactive)
    (call-interactively 'org-store-link)
    (org-capture nil "i"))
  ;; Use full window for org-capture
  (add-hook 'org-capture-mode-hook 'delete-other-windows)
  ;; Key bindings
  (define-key global-map (kbd "C-c i") 'org-capture-inbox)
  ;;Refile
  (setq org-refile-targets '((org-agenda-files :level . 1)))
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
#+end_src

* Packages
*** Doom Themes

#+begin_src elisp
  (setq custom-safe-themes t)
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

*** Solaire Mode

#+begin_src elisp
  (use-package solaire-mode
    :config
    (solaire-global-mode +1))
#+end_src

*** Doom Modeline

#+begin_src elisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
  (add-hook 'inferior-ess-mode-hook
        (lambda ()
          (add-to-list 'mode-line-process '(:eval (nth ess--busy-count ess-busy-strings)))))
#+end_src

*** Org Superstars

#+begin_src elisp
  (use-package org-superstar
       :config
       (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿" "❀" "☢" "☯" "✜" "◆" "▶"))
       (setq org-ellipsis " ▼")
       (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src

*** All The Icons

#+begin_src elisp
  (use-package all-the-icons
    :if (display-graphic-p))
  ; install all-the-icons and nerd fonts
#+end_src

*** All The Icons Ivy

#+begin_src elisp
  (use-package all-the-icons-ivy
    :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))
#+end_src

*** Ivy, Counsel & Swiper

#+begin_src elisp
  (use-package ivy
    :ensure t :ensure counsel :ensure swiper)
  ;; Enable Ivy mode in general
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  ;; Add Counsel and Swiper search functions
  (global-set-key (kbd "C-c f r") #'counsel-recentf)
  (global-set-key (kbd "C-s") #'swiper)
  ;; Replace default "M-x" and "C-x C-f" with Counsel version
  (global-set-key (kbd "M-x") #'counsel-M-x)
  (global-set-key (kbd "C-x C-f") #'counsel-find-file)
  ;; Replace describe-function and describe-variable with Counsel version
  (global-set-key (kbd "C-h f") 'counsel-describe-function)
  (global-set-key (kbd "C-h v") 'counsel-describe-variable)
#+end_src
 
*** Olivetti

#+begin_src elisp
  (use-package olivetti)
  ;; Set the body text width
  (setq olivetti-body-width 80)
  ;; Enable Olivetti for text-related mode such as Org Mode
  ;(add-hook 'text-mode-hook 'olivetti-mode)
#+end_src
  
*** Org Fragtog

#+begin_src elisp
  (use-package org-fragtog)
  (add-hook 'org-mode-hook 'org-fragtog-mode)
#+end_src

*** Which Key

#+begin_src elisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0))
#+end_src

*** Magit

#+begin_src elisp
  (use-package magit)
  (global-set-key (kbd "C-c g") 'magit-file-dispatch)
#+end_src

*** PDF Tools

#+begin_src elisp
  (use-package pdf-tools)
  (pdf-loader-install)
  (setq auto-revert-interval 0.5)
  (auto-revert-set-timer)
  ;; (add-to-list 'auto-mode-alist '("\\.pdf\\'" . doc-view-mode))
  ;; (add-hook 'doc-view-mode-hook #'pdf-tools-install)
  ;; Auto revert
  ;; (add-hook 'TeX-after-compilation-finished-functions  #'TeX-revert-document-buffer)
#+end_src

*** Org Noter, Org PDFTools & Org Noter PDFTools

#+begin_src elisp
  (use-package org-noter
    :config
    ;; Your org-noter config ........
    (require 'org-noter-pdftools))

  (use-package org-pdftools
    :hook (org-mode . org-pdftools-setup-link))

  (use-package org-noter-pdftools
    :after org-noter
    :config
    ;; Add a function to ensure precise note is inserted
    (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
      (interactive "P")
      (org-noter--with-valid-session
       (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                     (not org-noter-insert-note-no-questions)
                                                   org-noter-insert-note-no-questions))
             (org-pdftools-use-isearch-link t)
             (org-pdftools-use-freepointer-annot t))
         (org-noter-insert-note (org-noter--get-precise-info)))))

    ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
    (defun org-noter-set-start-location (&optional arg)
      "When opening a session with this document, go to the current location.
  With a prefix ARG, remove start location."
      (interactive "P")
      (org-noter--with-valid-session
       (let ((inhibit-read-only t)
             (ast (org-noter--parse-root))
             (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
         (with-current-buffer (org-noter--session-notes-buffer session)
           (org-with-wide-buffer
            (goto-char (org-element-property :begin ast))
            (if arg
                (org-entry-delete nil org-noter-property-note-location)
              (org-entry-put nil org-noter-property-note-location
                             (org-noter--pretty-print-location location))))))))
    (with-eval-after-load 'pdf-annot
      (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src
  
*** Org Roam

#+begin_src elisp
  (use-package org-roam
    ;:init
    ;(setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "/mnt/tsys/sys/roam")
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :config
    ;(org-roam-setup)
    (org-roam-db-autosync-mode))
  (require 'org-roam)
  ;; Create the property "type"
    (cl-defmethod org-roam-node-type ((node org-roam-node))
      "Return the TYPE of NODE."
      (condition-case nil
          (file-name-nondirectory
           (directory-file-name
            (file-name-directory
             (file-relative-name (org-roam-node-file node) org-roam-directory))))
        (error "")))
  ;; Display node types
  (setq org-roam-node-display-template
        (concat "${type:15} ${title:80} " (propertize "${tags}" 'face 'org-tag)))
#+end_src

*** Org Ref, Helm Bibtex & ORB

#+begin_src elisp
  (use-package org-roam-bibtex
    :ensure t :ensure helm-bibtex :ensure org-ref)
  ;; Set up bibliography
  (setq bibtex-completion-bibliography '("/mnt/tsys/sys/roam/bibtex.bib"))
  ;; Set up notes
  (setq bibtex-completion-notes-path "/mnt/tsys/sys/roam/")
  ;; Open pdf files stored in Zotero
  (setq bibtex-completion-pdf-field "File")
  ;; Customize layout of search results
  '((t . "${author:36} ${title:*} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:7}"))
  ;; Fields used for searching
  (setq bibtex-completion-additional-search-fields '(keywords))
  ;; Org-ref-helm
  (require 'org-ref-helm)
  (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
        org-ref-insert-cite-function 'org-ref-cite-insert-helm
        org-ref-insert-label-function 'org-ref-insert-label-link
        org-ref-insert-ref-function 'org-ref-insert-ref-link
        org-ref-cite-onclick-function (lambda (_)
                                        (org-ref-citation-hydra/body)))
  ;; Org-ref kbd
  (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
  ;; Org-roam-bibtex
  (require `org-roam-bibtex)
  (add-hook 'after-init-hook #'org-roam-bibtex-mode)
  (define-key org-roam-bibtex-mode-map (kbd "C-c n a") #'orb-note-actions)
  ;;ORB with Org-noter
  (setq orb-preformat-keywords
        '("citekey" "author" "year" "title" "abstract" "keywords" "file")
        orb-process-file-keyword t
        orb-file-field-extensions '("pdf"))
  ;;ORB template
  (setq org-roam-capture-templates
        '(("b" "books" plain 
           (file "~/.emacs.d/capture/books.org")
           :if-new
           (file+head "books/%<%Y%m%d%H%M%S>-${citekey}.org"
                      "#+title: ${author} (${year})\n")
           :unarrowed t)
          ("o" "onenote" plain "%?"
           :if-new
           (file+head "books/%<%Y%m%d%H%M%S>-${slug}.org"
                      "#+title: ${title}\n")
           :unnarrowed t)
          ("v" "videos" plain "%?"
           :if-new
           (file+head "videos/%<%Y%m%d%H%M%S>-${slug}.org"
                      "#+title: ${title}\n#+ROAM_REFS: ${ref}\n")
           :unnarrowed t)
          ("j" "journals" plain
           (file "~/.emacs.d/capture/journals.org")
           :if-new
           (file+head "journals/%<%Y%m%d%H%M%S>-${citekey}.org"
                      "#+title: ${author} (${year})\n")
           :unarrowed t)
          ("m" "manuals" plain "%?"
           :if-new
           (file+head "manuals/%<%Y%m%d%H%M%S>-${slug}.org"
                      "#+title: ${title}\n#+ROAM_REFS: ${ref}\n")
           :unnarrowed t)
          ("n" "news" plain "%?"
           :if-new (file+head "news/%<%Y%m%d%H%M%S>-${slug}.org"
                      "#+title: ${title}\n#+ROAM_REFS: ${ref}\n")
           :unnarrowed t)))
#+end_src

*** Org-Roam-UI

#+begin_src elisp
  (use-package org-roam-ui
    :ensure t :ensure websocket :ensure simple-httpd)
  (load-library "org-roam-ui")
  (setq org-roam-ui-open-on-start nil)
  ;; if org-roam-ui not show citation links, clear db & sync again
#+end_src

*** ESS

#+begin_src elisp 
  (use-package ess
    :ensure t :ensure company)
  ;; R-mode
  (add-to-list 'auto-mode-alist '("\\.R\\'" . r-mode))
  ;; Smart assign
  (eval-after-load "ess-mode" '(define-key ess-mode-map (kbd "C-;") "<-"))
  (eval-after-load "ess-mode" '(define-key inferior-ess-mode-map (kbd "C-;") "<-"))
  (autoload 'ess-rdired "ess-rdired"  
    "View *R* objects in a dired-like buffer." t)
  (global-font-lock-mode 1)                     ; for all buffers
  (add-hook 'org-mode-hook 'turn-on-font-lock)  ; Org buffers only
  ;; Auto completion
  (require 'company)
  (setq tab-always-indent 'complete)
  (setq company-idle-delay 0.1)
  (global-company-mode)
  (with-eval-after-load 'ess
        (setq ess-use-company t))
#+end_src

*** Yasnippet

#+begin_src elisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (yas-global-mode 1))
#+end_src

*** Org-Download

#+begin_src elisp
  (use-package org-download
    :config
    ;; add support to dired
    (add-hook 'dired-mode-hook 'org-download-enable))
  (setq-default org-download-image-dir "/mnt/tsys/org-download")
#+end_src

*** Multiple Cursors

#+begin_src elisp
  (use-package multiple-cursors
    :config
    (global-set-key (kbd "C-c e l") 'mc/edit-lines)
    (global-set-key (kbd "C-c m n") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-c m p") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c m a") 'mc/mark-all-like-this))
#+end_src

*** Transpose Frame

#+begin_src  elisp
  (use-package transpose-frame)
#+end_src

*** Command-Log-Mode

#+begin_src elisp
  (use-package command-log-mode)
#+end_src

*** Djvu

#+begin_src elisp
  (use-package djvu)
#+end_src

*** Nov

#+begin_src elisp
  (use-package nov)
#+end_src

*** Company-C-Headers

#+begin_src elisp
  (use-package company-c-headers)
  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company)
    (add-hook 'c-mode-hook 'company))
  (add-to-list 'company-backends 'company-c-headers)
  ;;gcc -xc++ -E -v -
  (add-to-list 'company-c-headers-path-system "/usr/lib/gcc/x86_64-linux-gnu/11/include")
  (add-to-list 'company-c-headers-path-system "/usr/include/c++/11")
#+end_src

*** Clang-Format

#+begin_src elisp
  (use-package clang-format)
  (load "/usr/share/emacs/site-lisp/clang-format-14/clang-format.el")
  ;in the project's root
  ;clang-format -style=llvm -dump-config > .clang-format
#+end_src

*** Conda

#+begin_src elisp
  (use-package conda
    :config
    (setq conda-anaconda-home (expand-file-name "~/anaconda3/"))
    (setq conda-env-home-directory (expand-file-name "~/anaconda3/"))
    (setq conda-env-subdirectory "envs"))
  (unless (getenv "CONDA_DEFAULT_ENV")
    (conda-env-activate "base"))
#+end_src

*** Jupyter

#+begin_src elisp
  (use-package jupyter)
  (setq jupyter-repl-echo-eval-p t)
#+end_src

*** Jinx

#+begin_src elisp
  (use-package jinx
    :hook (emacs-startup . global-jinx-mode)
    :bind (("M-$" . jinx-correct)
           ("C-M-$" . jinx-languages)))
#+end_src

*** Ellama

#+begin_src elisp
  (use-package ellama
      :bind ("C-c e" . ellama-transient-main-menu)
      :init)
#+end_src

*** Ox-Pandoc

#+begin_src elisp
  (use-package ox-pandoc
    :config
    (setq org-pandoc-options '((standalone . t))))
#+end_src

*** Auto-Package-Update

#+begin_src elisp
  (use-package auto-package-update
    :ensure t
    :custom
    (auto-package-update-interval 7) ;; check every 7 days
    (auto-package-update-prompt-before-update t) ;; ask before updating
    (auto-package-update-delete-old-versions t) ;; clean up after updating
    :config
    (auto-package-update-maybe))
#+end_src

* Utility Functions
*** Update Tags for Latex Formulae

#+begin_src elisp
  (defun butler/update-tag ()
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (let ((count 1))
        (while (re-search-forward "\\tag{\\([0-9]+\\)}" nil t)
          (replace-match (format "%d" count) nil nil nil 1)
          (setq count (1+ count)))))
    )
#+end_src

*** Outline Mode for R

#+begin_src elisp
  (add-hook 'ess-mode-hook
      '(lambda ()
      (outline-minor-mode)
      (setq outline-regexp "^#.*!")
      (defun outline-level ()
      (cond (looking-at "^#.*!") 1)
      (t 1000)
      )
      (defun butler/send-section-to-R ()
      (interactive ())
      (let ((beg))
      (if (outline-on-heading-p)
      (beginning-of-line)
      (outline-previous-visible-heading 1))
      (setq beg (point))
      (set-mark (point))
      (outline-next-visible-heading 1)
      (previous-line 1)
      (end-of-line 1)
      (ess-eval-region-or-function-or-paragraph-and-step)
      )
      )
      (local-set-key (kbd "C-c h") 'outline-hide-body)
      (local-set-key (kbd "C-c s") 'outline-show-all)
      (local-set-key (kbd "C-c <left>") 'outline-hide-entry)
      (local-set-key (kbd "C-c <right>") 'outline-show-entry)
      (local-set-key (kbd "C-c <up>") 'outline-previous-heading)
      (local-set-key (kbd "C-c <down>") 'outline-next-heading)
      (local-set-key (kbd "C-c t") 'send-section-to-R)
      )
      )
#+end_src

*** Read Images in Clipboard in WSL2

#+begin_src elisp
  (defun butler/org-download-wsl-clipboard()
    "use powershell to catch the clipboard, 
    to simplify the logic, use c:/Users/Public as temporary directoy, and move it into current directoy"
    (interactive)
    (let* ((powershell "/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe")
           (file-name (format-time-string "screenshot_%Y%m%d_%H%M%S.png"))
           ;; (file-path-powershell (concat "c:/Users/\$env:USERNAME/" file-name))
           (file-path-wsl (concat "/mnt/tsys/org-download/" file-name))
           )
      ;; (shell-command (concat powershell " -command \"(Get-Clipboard -Format Image).Save(\\\"C:/Users/\\$env:USERNAME/" file-name "\\\")\""))
      (shell-command (concat powershell " -command \"(Get-Clipboard -Format Image).Save(\\\"C:/Users/Public/" file-name "\\\")\""))
      (rename-file (concat "/mnt/c/Users/Public/" file-name) file-path-wsl)
      (insert (concat "[[file:" file-path-wsl "]]"))
      (message "insert DONE.")))
#+end_src

*** MCQ Balance Engine
***** Unique Mixing Heading & Generating Random Exam Code

#+begin_src elisp
  (require 'cl-lib)

  ;; Shuffle a list using the Fisher-Yates shuffle algorithm.
  (defun shuffle-list (list)
    "Return a new shuffled copy of LIST using Fisher–Yates shuffle."
    (let ((vec (vconcat list)))  ;; Convert the list to a vector for in-place manipulation
      (cl-loop for i from (1- (length vec)) downto 1
               do (cl-rotatef (aref vec i) (aref vec (random (1+ i)))))
      (append vec nil)))  ;; Convert the vector back to a list

  ;; Generate the file name for saving unique combinations.
  (defun unique-combinations-file-for-org (org-file)
    (concat (file-name-directory org-file)
            (file-name-base org-file)
            "-unique-combinations.el"))

  ;; Load previously saved unique combinations from file.
  (defun load-unique-combinations (org-file)
    (let ((data-file (unique-combinations-file-for-org org-file)))
      (if (file-exists-p data-file)
          (with-temp-buffer
            (insert-file-contents data-file)
            (read (current-buffer)))
        '())))  ;; Return empty list if no combinations exist.

  ;; Save unique combinations to a file.
  (defun save-unique-combinations (org-file combinations)
    (let ((data-file (unique-combinations-file-for-org org-file)))
      (with-temp-file data-file
        (prin1 combinations (current-buffer)))))

  ;; Generate the file name for saving used IDs.
  (defun get-used-ids-file (org-file)
    (concat org-file ".used-ids.el"))

  ;; Load previously used IDs from file.
  (defun load-used-ids (org-file)
    (let ((file (get-used-ids-file org-file)))
      (if (file-exists-p file)
          (with-temp-buffer
            (insert-file-contents file)
            (read (current-buffer)))
        '())))  ;; Return empty list if no IDs exist.

  ;; Save used IDs to a file.
  (defun save-used-ids (org-file ids)
    (let ((file (get-used-ids-file org-file)))
      (with-temp-file file
        (prin1 ids (current-buffer)))))

  ;; Generate a unique random 3-digit ID (between 100 and 999).
  (defun get-unique-random-id (org-file)
    "Generate a unique random 3-digit number (100–999)."
    (let* ((used-ids (load-used-ids org-file))
           (available-ids (cl-set-difference (number-sequence 100 999) used-ids)))
      (if (null available-ids)
          (error "No more unique 3-digit numbers available.")
        (let ((new-id (nth (random (length available-ids)) available-ids)))
          (save-used-ids org-file (cons new-id used-ids))
          new-id))))

  ;; Normalize a combination of headings for comparison (concatenate them into a string).
  (defun normalize-combination (combo)
    "Normalize a heading combination for comparison."
    (mapcar (lambda (heading)
              (mapconcat #'identity heading "\n"))
            combo))

  ;; Display a summary of available tags and their counts in a new buffer.
  (defun display-tag-summary (all-tag-headings)
    "Display a summary of available tags and their counts in a new buffer."
    (let ((buffer (get-buffer-create "*Org Tags Summary*")))
      (with-current-buffer buffer
        (erase-buffer)
        (org-mode)
        (insert "* Below is the list of available tags, and the respective counts represent the maximum number a user can input for each tag:\n\n")
        (maphash (lambda (tag headings)
                   (insert (format "** %s: %d available\n" tag (length headings))))
                 all-tag-headings)
        (goto-char (point-min)))
      (pop-to-buffer buffer)))

  ;; Main function that combines headings by tags and allows the user to select a unique combination.
  (defun butler/mcq-persistent-org-combo-shuffler ()
    "Select unique org headings by tag-input with persistent uniqueness."
    (interactive)

    (let* ((org-file (buffer-file-name))
           (all-tag-headings (make-hash-table :test 'equal))
           (previous-combinations (load-unique-combinations org-file))
           final-combination)

  ;; Step 1: Index tags only from top-level parents or leaf nodes
  (save-excursion
    (goto-char (point-min))
    (let ((headings '()))
      ;; Collect all headings
      (org-map-entries
       (lambda ()
         (let* ((tags (org-get-tags))
                (level (org-current-level))
                (begin (point))
                (end (save-excursion (org-end-of-subtree t t)))
                (has-children (save-excursion
                                (goto-char begin)
                                (re-search-forward (format "^\\*\\{1,%d\\} " (1+ level)) end t)))
                (content (split-string
                          (buffer-substring-no-properties
                           (line-beginning-position)
                           end)
                          "\n")))
           (when tags
             (push (list :tags tags
                         :level level
                         :has-children has-children
                         :content content)
                   headings))))
       nil 'file)

      ;; Build tag index (filter only top-parents or leafs)
      (let ((filtered-headings
             (seq-filter (lambda (h)
                           (let ((lvl (plist-get h :level))
                                 (kids (plist-get h :has-children)))
                             (or (and (= lvl 1) kids)  ; top parent with children
                                 (not kids))))        ; leaf node
                         headings)))
        (dolist (h filtered-headings)
          (dolist (tag (plist-get h :tags))
            (puthash tag
                     (cons (plist-get h :content)
                           (gethash tag all-tag-headings))
                     all-tag-headings))))))
      
      ;; Step 2: Display tag summary
      (display-tag-summary all-tag-headings)

      ;; Step 3: Tag input validation
      (let ((tag-counts '())
            (valid-input nil)
            (prompt "Enter tags and numbers (e.g., math=2,science=3): "))
        (while (not valid-input)
          (let* ((tag-input (read-string prompt))
                 (parsed-tag-counts '())
                 (valid t))
            (if (not (string-blank-p tag-input))
                (dolist (pair (split-string tag-input "," t))
                  (let* ((split (split-string pair "="))
                         (tag (car split))
                         (count (and (cadr split) (string-to-number (cadr split))))
                         (available (gethash tag all-tag-headings)))
                    (if (or (null available) (<= count 0) (< (length available) count))
                        (setq valid nil)
                      (push (cons tag count) parsed-tag-counts))))
              (setq valid nil))
            (if valid
                (setq tag-counts (nreverse parsed-tag-counts)
                      valid-input t)
              (setq prompt "Wrong input. Re-Enter tags and numbers (e.g., math=2,science=3): "))))

        ;; Step 4: Generate unique combination
        (let ((attempt 0)
              (max-attempts 1000)
              (unique-combo-found nil))
          (while (and (< attempt max-attempts) (not unique-combo-found))
            (setq attempt (1+ attempt))
            (let ((combo '()))
              (dolist (tag-count tag-counts)
                (let* ((tag (car tag-count))
                       (count (cdr tag-count))
                       (available (shuffle-list (copy-sequence (gethash tag all-tag-headings))))
                       (selected '()))
                  (while (and available (< (length selected) count))
                    (let ((candidate (pop available)))
                      (unless (or (member candidate selected)
                                  (seq-some (lambda (combo)
                                              (seq-some (lambda (x) (equal x candidate)) combo))
                                            previous-combinations))
                        (push candidate selected))))
                  (when (< (length selected) count)
                    (let ((fallbacks (shuffle-list (copy-sequence (gethash tag all-tag-headings)))))
                      (while (and fallbacks (< (length selected) count))
                        (let ((extra (pop fallbacks)))
                          (unless (member extra selected)
                            (push extra selected))))))
                  (setq combo (append combo selected))))
              (setq combo (shuffle-list combo))
              (unless (seq-some (lambda (prev)
                                  (equal (normalize-combination combo)
                                         (normalize-combination prev)))
                                previous-combinations)
                (setq final-combination combo)
                (setq unique-combo-found t))))

          ;; Step 5: Display result or error
          (if (not final-combination)
              (message "Failed to generate unique combo after %d attempts." max-attempts)
            (push final-combination previous-combinations)
            (save-unique-combinations org-file previous-combinations)
            (let ((buffer (get-buffer-create "*Unique Org Headings*"))
                  (code (get-unique-random-id org-file)))
              (with-current-buffer buffer
                (erase-buffer)
                (org-mode)
                (insert (format "*Exam code:* %d\n\n" code))
                (dolist (heading final-combination)
                  (let ((header-line (car heading)))
                    (insert header-line "\n")
                    (let ((prev-line-type nil))
                      (dolist (line (cdr heading))
                        (cond
                         ((string-match-p "^\\s-*:PROPERTIES:" line)
                          (insert line "\n")
                          (setq prev-line-type 'prop))
                         ((string-match-p "^\\s-*:END:" line)
                          (insert line "\n")
                          (setq prev-line-type 'prop-end))
                         ((string-match-p "^\\s-*:.*" line)
                          (insert line "\n")
                          (setq prev-line-type 'prop))
                         ((string-match-p "^\\*+" line)
                          (when (eq prev-line-type 'prop-end)
                            (insert "\n"))
                          (insert line "\n")
                          (setq prev-line-type 'meta))
                         (t
                          ;; Add blank line after properties
                          (when (memq prev-line-type '(prop prop-end))
                            (insert "\n"))
                          ;; Add blank line between content paragraphs
                          (when (and (eq prev-line-type 'content)
                                     (not (string-blank-p line)))
                            (insert "\n"))
                          (insert line "\n")
                          (setq prev-line-type 'content))))))
                  (insert "\n")))
              (switch-to-buffer buffer)
              (message "Unique combination generated in %d attempt(s)." attempt)))))))
#+end_src

***** Extract Correct Answers

#+begin_src elisp
  (require 'subr-x)  ;; For string-trim

  (defun butler/mcq-extract-correct-answers (file-path)
    "Extract :Correct: answers from the current Org buffer and save to FILE-PATH as a CSV.
  Keeps only the most recent answers by deleting everything above the last 'Question,Answer'."
    (interactive
     (list (read-file-name "Enter file path to save answers (as CSV): ")))

    ;; Collect answers from Org buffer
    (let ((answers '("Question,Answer"))
          (qnum 1))
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "^\\s-*:Correct: \\(.*\\)$" nil t)
          (push (format "%d,%s" qnum (string-trim (match-string 1))) answers)
          (setq qnum (1+ qnum))))

      ;; Write to temp file
      (let* ((temp-file (make-temp-file "org-answers-" nil ".csv"))
             (clean-content ""))
        (with-temp-file temp-file
          (insert (mapconcat #'identity (nreverse answers) "\n"))
          (insert "\n"))

        ;; Keep only from last 'Question,Answer' onward
        (with-temp-buffer
          (insert-file-contents temp-file)
          (goto-char (point-max))
          (when (re-search-backward "^Question,Answer$" nil t)
            (setq clean-content (buffer-substring-no-properties (point) (point-max)))))

        ;; Write cleaned content to final file
        (with-temp-file file-path
          (insert clean-content)))

      (message "Saved %d answers to %s" (1- qnum) file-path)))
#+end_src

***** Renumber Questions with Cleaned Formatting

#+begin_src elisp
  (defun butler/mcq-export-cleaned-questions ()
    "Reformat Org buffer by renumbering questions as 'Question N' or 'Câu N',
  removing properties, preserving '*Exam code:* NNN', and asking whether to show tags.
  Adds blank lines after Org-mode tables but not before them."

    (interactive)
    (let ((use-vietnamese (y-or-n-p "Use Vietnamese format ('Câu') for question headings? "))
          (show-tags (y-or-n-p "Show tags in cleaned output? "))
          (output-buffer (get-buffer-create "*Formatted Questions*"))
          (count 1)
          (exam-code-line nil)
          (inside-table nil))  ;; Track if we are inside a table

      ;; Prepare output buffer
      (with-current-buffer output-buffer
        (erase-buffer)
        (org-mode))

      ;; Scan the buffer
      (save-excursion
        (goto-char (point-min))

        ;; Check if exam code line exists
        (when (re-search-forward "^\\*Exam code:\\*\\s-*\\([0-9]+\\)" nil t)
          (setq exam-code-line (buffer-substring-no-properties (match-beginning 0) (match-end 0))))

        ;; Write Exam code line first if found
        (when exam-code-line
          (with-current-buffer output-buffer
            (insert exam-code-line "\n\n")))

        ;; Restart scan from beginning
        (goto-char (point-min))

        ;; Process all headings except Exam code
        (while (re-search-forward "^\\*+\\s-+\\(.*\\)$" nil t)
          (let* ((heading-line (match-string 0))
                 (is-exam-code (string-match "^\\*Exam code:\\*" heading-line))
                 (start (match-beginning 0))
                 (end (save-excursion
                        (if (re-search-forward "^\\*+\\s-" nil t)
                            (match-beginning 0)
                          (point-max)))))

            (unless is-exam-code
              (let ((section (buffer-substring-no-properties start end))
                    (in-properties nil)
                    (lines nil)
                    (tag-part "")
                    (question-text "")
                    (body-lines '()))

                ;; Split and parse lines
                (setq lines (split-string section "\n" t))

                ;; Extract tags from heading
                (when (string-match ":\\([^:\n]+\\(?::[^:\n]+\\)*\\):\\s-*$" (car lines))
                  (setq tag-part (match-string 0 (car lines))))

                ;; Skip heading line
                (setq lines (cdr lines))

                ;; Process lines, skipping :PROPERTIES: drawer
                (dolist (line lines)
                  (cond
                   ((string-match "^\\s-*:PROPERTIES:" line)
                    (setq in-properties t))
                   ((string-match "^\\s-*:END:" line)
                    (setq in-properties nil))
                   ((not in-properties)
                    (push line body-lines))))

                (setq body-lines (nreverse body-lines))
                (setq question-text (car (seq-drop-while #'string-blank-p body-lines)))
                (setq body-lines (cdr (member question-text body-lines)))

                ;; Insert cleaned heading and content
                (with-current-buffer output-buffer
                  (insert (format "*%s %d:* %s" (if use-vietnamese "Câu" "Question") count question-text))
                  (when (and show-tags tag-part)
                    (insert "  " tag-part))
                  (insert "\n\n")

                  ;; Process the body lines
                  (dolist (line body-lines)
                    (cond
                     ;; Table handling: Do NOT add a blank line before, but **always** add one after
                     ((string-prefix-p "|" line)
                      (insert line "\n")
                      (setq inside-table t))

                     ;; End of table: **Force a blank line**
                     ((and inside-table (not (string-prefix-p "|" line)))
                      (setq inside-table nil)
                      (insert "\n" line "\n\n"))  ;; **Ensures a blank line after the table**

                     ;; Non-table content (add blank line after regular content)
                     (t
                      (unless (string-blank-p line)
                        (insert line "\n\n"))))))  ;; Blank line after non-table content

              (setq count (1+ count)))))))

      ;; Show result
      (switch-to-buffer output-buffer)))
#+end_src

***** Check Missing Correct Answers

#+begin_src elisp
  (defun butler/mcq-check-missing-correct-answers ()
    "Find questions with a blank :Correct: property and show clickable links to fix them."
    (interactive)
    (let ((results '()))
      (org-map-entries
       (lambda ()
         (let ((correct (org-entry-get (point) "Correct")))
           (when (and correct (string-blank-p correct))
             (let ((link (org-store-link nil)))
               (push link results)))))
       nil 'file)
      (if results
          (let ((buf (get-buffer-create "*Fix Blank :Correct:*")))
            (with-current-buffer buf
              (erase-buffer)
              (insert "* Questions missing :Correct: value\n\n")
              (dolist (link (reverse results))
                (insert "- " link "\n"))
              (org-mode))
            (display-buffer buf))
        (message "All questions have valid :Correct: answers."))))
#+end_src



